'use client';

import type { Metadata } from 'next';
import { Inter } from 'next/font/google';
import './globals.css';
import Chat from './page';
import { ExampleChatService } from '@chatscope/use-chat/dist/examples';
import { AutoDraft } from '@chatscope/use-chat/dist/enums/AutoDraft';
import {
  BasicStorage,
  ChatMessage,
  ChatProvider,
  Conversation,
  ConversationId,
  ConversationRole,
  IStorage,
  MessageContentType,
  Participant,
  Presence,
  TypingUsersList,
  UpdateState,
  User,
  UserStatus,
} from '@chatscope/use-chat';
import { nanoid } from 'nanoid';

const inter = Inter({ subsets: ['latin'] });

const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const messageIdGenerator = (message: ChatMessage<MessageContentType>) =>
    nanoid();
  const groupIdGenerator = () => nanoid();

  const serviceFactory = (storage: IStorage, updateState: UpdateState) => {
    return new ExampleChatService(storage, updateState);
  };

  const akaneStorage = new BasicStorage({
    groupIdGenerator,
    messageIdGenerator,
  });

  const akaneModel = {
    name: 'Akane',
    avatar: 'akaneAvatar',
  };

  const akane = new User({
    id: akaneModel.name,
    presence: new Presence({ status: UserStatus.Available, description: '' }),
    firstName: '',
    lastName: '',
    username: akaneModel.name,
    email: '',
    avatar: akaneModel.avatar,
    bio: '',
  });

  return (
    <html>
      <ChatProvider
        serviceFactory={serviceFactory}
        storage={akaneStorage}
        config={{
          typingThrottleTime: 250,
          typingDebounceTime: 900,
          debounceTyping: true,
          autoDraft: AutoDraft.Save | AutoDraft.Restore,
        }}
      >
        <Chat />
      </ChatProvider>
    </html>
  );
}
